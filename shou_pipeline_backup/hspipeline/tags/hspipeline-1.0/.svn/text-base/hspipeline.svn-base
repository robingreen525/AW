#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Std;
use Data::Dumper;
use Hspipeline;

# hspipeline -- A script for calling variants using the output from 
# Illumina's high-throughput sequencing platforms.
# REQUREMENTS --
#
#  call_plot_cnv.r
#  plot_cnv.r
#  depthstats
#  cnvfind
#
#  Install
#   * R
#   * bowtie2 
#   * samtools (wich includes 'bcftools' and 'vcfutils.pl')
#
#  Put all binary files on the computer's search path.

main();
exit;

sub main {
  $| = 1;
  my %opts;
  getopts('p:r:t:a:R:e:', \%opts);
  usage() if scalar values %opts != 6; 

  my $program_tag = "[hspipeline]";

  die "$program_tag Can't find reference sequence!" unless -e    $opts{'r'};
  die "$program_tag Can't find project folder!"     unless -e -d $opts{'p'};
  die "$program_tag Can't find ancestor folder!"    unless -e -d $opts{'a'};
  die "$program_tag Can't find plotting functions!" unless -e -d $opts{'R'};

  for ($opts{'p'},$opts{'a'},$opts{'R'}) {
    chop if $_ =~ /\/$/;
  }


  my $project_path = $opts{'p'};
  my $ref_seq      = $opts{'r'};
  my $anc_path     = $opts{'a'};
  my $nthread      = $opts{'t'};
  my $path_to_code = $opts{'R'};
  my $end_type     = $opts{'e'};

  my $pipeline;
  my $pattern;
  my $concat;
  if ($end_type eq "p") {
    $pipeline = \&pe_pipeline;
    $pattern  = '\.fastq\.gz$';
    $concat   = 1;
  } elsif ($end_type eq "s") {
    $pipeline = \&se_pipeline;
    $pattern  = '\_sequence\.txt$';
    $concat   = 0;
  } else {
    die usage();
  }

  print "$program_tag Beginning pipeline...\n";
  index_reference($ref_seq);

  print "$program_tag   Making paths...";
  my $seq_paths = generate_paths({proj    => $project_path, 
                                  pattern => $pattern,
                                  concat  => $concat});
  print "done!\n";

  #die Dumper($seq_paths);
  # Creates all _aligned.bam, _sorted.bam, _sorted.bam.bai, _sorted.pileup,
  # _sorted_pileup.bcf, _raw_vars.vcf, _raw_vars.bcf
  while (my ($strain, $seqs) = each %$seq_paths) {
    &$pipeline({strain  => $strain,
                seqs    => $seqs, 
                ref     => $ref_seq,
                nthread => $nthread});
  }
  
  # Creates ancestor_deletion_locations.txt, all _depthstats.txt, and
  # evolved _cnvfind.txt files.
  my $pileup_ext = "_sorted.pileup";
  find_cnv({anc_path   => $anc_path, 
            all_paths  => $seq_paths,
            pileup_ext => $pileup_ext,
          });

  # Creates evolved CNV plots, _cnv_locations.txt and 
  # _deletion_locations.txt files.
  plot_cnv({anc_path   => $anc_path,
            all_paths  => $seq_paths,
            pileup_ext => $pileup_ext,
            window     => 500,
            R_path     => $path_to_code,
          });

  # Creates in_x_and_y.txt, in_x_not_y.txt, etc. files.
  while (my ($strain,$seq) = each %$seq_paths) {
    compare_to_anc({proj     => $project_path,
                    strain   => $strain,
                    anc_path => $anc_path,
                    file     => "_raw_vars.vcf",
                    vcf_tol  => 0,
                  });

    compare_to_anc({proj     => $project_path,
                    strain   => $strain,
                    anc_path => $anc_path,
                    file     => "_deletion_locations.txt",
                    vcf_tol  => 50,
                  });
  }
}

sub pe_pipeline {
  my $p = shift;
  my $strain  = $p->{strain};
  my $seqs    = $p->{seqs};
  my $ref_seq = $p->{ref};
  my $nthread = $p->{nthread};

  my $parent = get_parent($seqs->[0]);
  my @seqs = sort @$seqs;

  my $program_tag = "[hspipeline pe]";

  my $ref_folder   = get_parent($ref_seq);
  my $ref_name     = get_name($ref_folder);
  my $ref_location = $ref_folder.'/'.$ref_name;

  # Input/output filenames
  my $pfx          = $parent.'/'.$strain;
  my $bam          = $pfx.'_aligned.bam';
  my $sorted       = $pfx.'_sorted';
  my $pileup       = ${sorted}.".pileup";
  my $pileup_bcf   = ${sorted}."_pileup.bcf";
  my $var_bcf      = $pfx."_raw_vars.bcf";
  my $var_vcf      = $pfx."_raw_vars.vcf";

  print "$program_tag Processing $strain...\n";
  my @seq_names = ();
  for my $seq (@seqs) {
    next unless $seq =~ /^(.*)\.fastq\.gz$/;
    my $name = $1;
    push @seq_names, $name;

  }

  my $align =
    "bowtie2 -p $nthread -x $ref_location -1 $seqs[0] -2 $seqs[1] |".
    " samtools view -bS - > $bam";
  my $sort = "samtools sort $bam $sorted";
  my $index = "samtools index $sorted.bam";
  my $make_pileup = 
    "samtools mpileup -BQ0 -d10000000 -f $ref_seq  $sorted.bam > $pileup";
  my $make_pileup_bcf = 
    "samtools mpileup -Bg -C50 -q30 -f $ref_seq $sorted.bam > $pileup_bcf";
  my $call_vars   = "bcftools view -Nbvcg $pileup_bcf > $var_bcf";
  my $vars_to_vcf = "bcftools view $var_bcf > $var_vcf";

  print "$program_tag Aligning...\n";
  system($align) == 0 or die "$program_tag Alignment failed: $!";

  print "$program_tag Sorting...\n";
  system($sort) == 0 or die "$program_tag Sorting failed: $!";

  print "$program_tag Indexing BAM file...\n";
  system($index) == 0 or die "$program_tag Indexing failed: $!";

  print "$program_tag Generating pileup...\n";
  system($make_pileup) == 0 or die "$program_tag Pileup failed: $!";

  print "$program_tag Generating pileup bcf...\n";
  system($make_pileup_bcf) == 0 or die "$program_tag Pileup failed: $!";

  print "$program_tag Calling variants...\n";
  system($call_vars) == 0 or die "$program_tag Calling variants failed: $!";

  print "$program_tag Converting variants to vcf...\n";
  system($vars_to_vcf) == 0 
    or die "$program_tag Converting vars to vcf failed: $!";

  print "Finished $strain!\n\n";
}

sub index_reference {
  my $ref_path = shift;

  my $parent      = get_parent($ref_path);
  my $index_name  = get_name($parent);
  my $index_match = 'bt2$';

  my $index = "bowtie2-build $ref_path $parent/$index_name";

  # Look for files ending in '.bt2', which indicates indexing has been
  # performed.
  opendir(my $dh, $parent);
  unless (grep /$index_match/, readdir($dh)) {
    print "Indexing genome...\n";
    system($index) == 0 or die "Indexing failed: $!";
  } else {
    print "Looks like sequence has been indexed, continuing...\n";
  }
  close $dh;
}

sub find_cnv {
  my $p = shift;
  my $anc_path   = $p->{anc_path};
  my $all_paths  = $p->{all_paths};
  my $pileup_ext = $p->{pileup_ext};

  my $evo_paths = get_evo_paths($all_paths, $anc_path);
  my $evo_pileups = join " ", map { $_.'/'.get_name($_).$pileup_ext }
                    @$evo_paths;
  my $anc_pileup  = $anc_path.'/'.get_name($anc_path).$pileup_ext;

  my $cnvfind = "cnvfind $anc_path $anc_pileup $evo_pileups";

  print "\n\nFinding CNV...\n";
  system($cnvfind)==0 or die "cnvfind failed: $!";
}

sub plot_cnv {
  my $p = shift;
  my $anc_path   = $p->{anc_path};
  my $all_paths  = $p->{all_paths};
  my $pileup_ext = $p->{pileup_ext};
  my $window     = $p->{window};
  my $R_path     = $p->{R_path};

  my $cnv_ext    = $pileup_ext."_cnvfind.txt";
  my $evo_paths = get_evo_paths($all_paths, $anc_path);

  my $R = "R --vanilla --slave < $R_path/call_plot_cnv.r";
  for my $evo_path (@$evo_paths) {
    my $evo_name = get_name($evo_path);
    my $evo_cnv = $evo_path.'/'.$evo_name.$cnv_ext;
    my $plot_cnv = "$R --args $R_path $evo_cnv $window $evo_name";

    print "Plotting CNV data for $evo_cnv...\n";
    system($plot_cnv)==0 or die "plotting on $evo_cnv failed: $!";
  }
}

sub compare_to_anc {
  my $p = shift;
  my $anc_path     = $p->{anc_path};
  my $strain       = $p->{strain};
  my $project_path = $p->{proj};
  my $file_suffix  = $p->{file};
  my $vcf_tol      = $p->{vcf_tol};

  my $anc_name = get_name($anc_path);
  return if $strain =~ /$anc_name/;

  my $anc = $anc_path.'/'.$anc_name.$file_suffix;
  my $evo = $project_path.'/'.$strain.'/'.$strain.$file_suffix;

  # Find SNPs unique to the evolved strain.
  print "Finding entries in ".$strain.$file_suffix.
        " that are not in ancestral strain...\n";
  my $vcfunique = "vcfunique -d$vcf_tol $anc $evo";
  system($vcfunique) == 0 or die "vcfunique failed: $!";
  print "done!\n";
}

sub get_evo_paths {
  my $path_hash = shift;
  my $anc_path  = shift;
  my @paths;

  for my $path (values %$path_hash) {
    next if get_parent($path->[0]) eq $anc_path;
    push @paths, get_parent(@$path);
  }

  return \@paths;
}

sub usage {
  die(qq/
    Usage: hspipeline -e [end type] -t [number of threads] -p <path to project folder> -r <path to reference genome> -a <path to ancestor folder> -R <path to R files>
      -e end type -- Either 's' or 'p' for single- or paired-end data, respectively.
      -t number of threads -- The number of processors to use (for computers with multiple processors).
      -p project folder -- A folder containing folders named after strains.  These folders contain the sequencing output from Illumina.
      -r reference genome -- The concatenated reference genome in fasta format.
      -a ancestor folder -- The folder that contains (or will contain) the ancestor data.
      -R Path to directory with R files.
      \n/);
}

sub se_pipeline {
  my $p = shift;
  my $strain  = $p->{strain};
  my $seq     = $p->{seqs}[0];
  my $ref_seq = $p->{ref};
  my $nthread = $p->{nthread};
  my $parent = get_parent($seq);

  my $program_tag = "[hspipeline se]";

  # input/output filenames
  my $pfx          = $parent.'/'.$strain;
  my $sai          = $pfx.".sai";
  my $bam          = $pfx."_aligned.bam";
  my $sorted       = $pfx."_sorted";
  my $pileup       = $sorted.".pileup";
  my $pileup_bcf   = ${sorted}."_pileup.bcf";
  my $var_bcf      = $pfx."_raw_vars.bcf";
  my $var_vcf      = $pfx."_raw_vars.vcf";
  my $depth        = $pfx."_depthstats.txt";

  # commands
  my $sa_coord = "bwa aln -i -k4 -t${nthread} $ref_seq $seq > $sai";
  my $align   = "bwa samse $ref_seq $sai $seq | samtools view -bs - > $bam";
  my $sort     = "samtools sort $bam $sorted";

  my $index = "samtools index $sorted.bam";
  my $make_pileup = 
    "samtools mpileup -bq0 -d10000000 -f $ref_seq  $sorted.bam > $pileup";
  my $make_pileup_bcf = 
    "samtools mpileup -bg -c50 -q30 -f $ref_seq $sorted.bam > $pileup_bcf";

  my $call_vars   = "bcftools view -nbvcg $pileup_bcf > $var_bcf";

  my $vars_to_vcf = "bcftools view $var_bcf > $var_vcf";

  # system calls
  print("$program_tag processing strain $strain...\n");
  print "[hspipeline] generating sa coordinates...\n";
  system($sa_coord)   == 0 or die "[hspipeline] alignment failed: $!";

  print "$program_tag aligning...\n";
  system($align) == 0 or die "$program_tag conversion to sam failed: $!";

  print "$program_tag sorting...\n";
  system($sort) == 0 or die "$program_tag filtering failed: $!";

  print "$program_tag indexing bam file...\n";
  system($index) == 0 or die "$program_tag indexing failed: $!";

  print "$program_tag generating pileup...\n";
  system($make_pileup) == 0 or die "$program_tag pileup failed: $!";

  print "$program_tag generating pileup bcf...\n";
  system($make_pileup_bcf) == 0 or die "$program_tag pileup bcf failed: $!";

  print "$program_tag calling variants...\n";
  system($call_vars) == 0 or die "$program_tag calling variants failed: $!";

  print "$program_tag converting variants to vcf...\n";
  system($vars_to_vcf) == 0 
    or die "$program_tag converting vars to vcf failed: $!";

  print "$program_tag calculating depth stats...\n";
  my $calc_depth = "depthstats $pileup $depth";
  system($calc_depth) == 0 
    or die "$program_tag calculating depth stats failed: $!";

  print "$program_tag finished $strain!\n\n";
}

