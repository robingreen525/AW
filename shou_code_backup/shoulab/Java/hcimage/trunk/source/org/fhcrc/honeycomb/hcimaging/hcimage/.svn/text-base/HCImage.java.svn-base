// vim: set filetype=java tabstop=2 shiftwidth=2 expandtab :

package org.fhcrc.honeycomb.hcimaging.hcimage;

import org.fhcrc.honeycomb.hcimaging.hcimage.region.*;
import org.fhcrc.honeycomb.hcimaging.hcexception.*;
import ij.*;
import java.io.File;
import java.util.Date;
import java.text.SimpleDateFormat;

/** HCImage represents the images generated by our microscope.
 * @author Adam Waite
 * @since $Date$
 */
public abstract class HCImage extends ImagePlus {
  protected final HCImageInfo info;
  protected Mask mask;
  protected boolean isOpen  = false;

  /** 
   * Creates a new HCImage.
   * @param info a <code>HCImageInfo</code> object containing information
   * about this image.
   */
  protected HCImage(HCImageInfo info) {
    super();
    this.info = info;
  }

  /** Copy constructor.  The information is immutable so we can return
   * a reference to the <code>HCImageInfo</code> object.  However, the 
   * processor might be manipulated so we make a new copy of it if it has 
   * been opened.
   * @param original the <code>HCImage</code> to copy.
   */
  protected HCImage(HCImage original) {
    info = original.info;
    if (isOpen) { this.setProcessor(original.getProcessor()); }
  }


  /// Abstract methods ///
  public abstract Mask makeMask(String threshold_method);
  public abstract void flatten(double blur, double rb_rad);
  public abstract void flatten(double rb_rad);
  public abstract Coordinates getMaximaList(double noise);
  public abstract boolean isFluorescence();

  /// Public implemented methods ///
  public void showMask() { mask.show(); }
  public void hideMask() { mask.hide(); }

  /**
   * Opens the image and returns a reference to it.  <code>HCImage</code>s 
   * can only be constructed using a file path, which prevents memory being
   * used for the <code>ImagePlus</code> portion of the class.  This method 
   * associates the actual image with the object.
   * @return the <code>HCImage</code>.
   * @throws UnopenableImageException
   */
  public HCImage open() throws UnopenableImageException { 
    if (isOpen) return this;

    ImagePlus imp = new ImagePlus(getImagePath().toString());

    if (imp.getProcessor() == null) throw new UnopenableImageException();

    setProcessor(imp.getProcessor());
    setTitle(getName());
    isOpen = true;
    imp.flush();
    imp = null;

    return this;
  }

  /**
   * Return the bare name of the file, without extension or path.  This
   * is useful for finding particular objects.
   * @return the name of the <code>HCImage</code>.
   */
  public String getName() { return info.file_name; }

  /**
   * Return the experiment name.
   * @return the experiment name.
   */
  public String getExperimentName() { return info.experiment_name; }

  /**
   * Return the timepoint of the image.
   * @return a string representing the timepoint.
   */
  public int getTimepoint() {
    return info.timepoint;
  }

  /**
   * Return the location of the image. For example, 'a'.
   * @return a string representing the location.
   */
  public String getLocation() { return info.location; }

  /**
   * Return the well that the image came from.  For example, 'B06'.
   * @return a string representing the well.
   */
  public String getWell() { return info.well; }

  /**
   * Return the name of the filter cube used to acquire this image.
   * @return the name of the filter cube.
   */
  public String getFilterCube() { return info.filter_cube; }

  /**
   * Return the exposure time in seconds.
   * @return the exposure time in seconds.
   */
  public double getExposureTime() { return info.exposure; }

  public double getXPosition() { return info.x_pos; }
  public double getYPosition() { return info.y_pos; }
  public double getZPosition() { return info.z_pos; }
  public Integer getIrisSize() { return info.iris_size; }
  public Integer getLampIntensity() { return info.lamp_intensity; }

  /**
   * Returns the x-dimension of the image, in pixels.
   * @return the number of pixels in the x-dimension of the image.
   */
  public int getXDim() { return info.x_dim; }

  /**
   * Returns the y-dimension of the image, in pixels.
   * @return the number of pixels in the y-dimension of the image.
   */
  public int getYDim() { return info.y_dim; }

  /**
   * Returns the path to the image file.
   * @return the path to the image file.
   */
  public File getImagePath() { return info.image_path; }


  /**
   * Returns the path to the information file.
   * @return the path to the information file.
   */
  public File getInfoPath() { return info.info_path; }

  /**
   * Returns the acquisition date.
   * @return the acquisition date as a <code>Date</code> object.
   */
  public Date getAcquisitionDate() { return info.acquisition_time; }

  /**
   * Returns the acquisition time.
   * @return the acquisition time in milliseconds past the epoch.
   */
  public long getAcquisitionTime() { 
    return info.acquisition_time.getTime();
  }

  /**
   * Returns the wavelength.
   * @return the wavelength number of the current image.
   */
  public int getWavelength() { return info.wavelength; }

  /**
   * Returns the camera binning.
   * @return the camera binning.
   */
  public short getBinning() { return info.binning; }

  /**
   * Returns the camera analog gain.
   * @return the camera analog gain.
   */
  public short getAnalogGain() { return info.analog_gain; }

  public String getPosition() { return info.position; }

  /**
   * Prints all information about this object.
   * @return a string describing this object.
   */
  public String toString() {
    return(
        "\n\tImage Path: " + info.image_path +
        "\n\tExperiment name: " + info.experiment_name  +
        "\n\tPosition: " + info.position +
        "\n\tWell: " + info.well +
        "\n\tLocation: " + info.location +
        "\n\tTimepoint: " + info.timepoint +
        "\n\tWavelength: " + info.wavelength +
        "\n\tAcquisition date: " + info.acquisition_time + 
        "\n\tBinning: " + info.binning +
        "\n\tFilter Cube: " + info.filter_cube + 
        "\n\tAnalog Gain: " + info.analog_gain +
        "\n\tExposure time (sec): " + info.exposure +
        "\n\tX Position: " + info.x_pos +
        "\n\tY Position: " + info.y_pos +
        "\n\tZ Position: " + info.z_pos +
        "\n\tX Picture Dimension: " + info.x_dim +
        "\n\tY Picture Dimension: " + info.y_dim + 
        "\n\tIris size: " + info.iris_size +
        "\n\tIntensity: " + info.lamp_intensity +
        "\n\n");
  }
}
