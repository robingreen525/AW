package org.fhcrc.honeycomb.hcimaging.hcimage;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.*;

/** HCImageInfo represents the file information generated by a microscopy
 * experiment.
 * @author Adam Waite
 * @version %I%,%G%
 */
public class HCImageInfo {
  // The regex corresponding to our image/info files.
  private static final String FILE_REGEX = ".+\\"+File.separator+
    "((.*)_(\\d+)_(([A-Z]\\d+)([a-z]?))_+WL(\\d))\\.\\w+";
  // These constants relate to the current format of our
  // picture information files.
  private static final String INFO_FOLDER = "picture_information";
  private static final String INFO_DATE_FORMAT = "M/dd/yyyy H:mm a";

  // This information comes from the path to the file
  // and the file name itself.
  public final File   image_path;
  public final String file_name;
  public final String experiment_name;
  public final String position; // 'b06a'
  public final String well;     // 'b06'
  public final String location; // 'a'
  public final int    timepoint;
  public final int    wavelength;

  // this information comes from the file found in the
  // 'picture_information' folder.
  public final File info_path;
  public final Date acquisition_time;
  public final String filter_cube;
  public final short binning;
  public final short analog_gain;
  public final double exposure;
  public final double x_pos, y_pos, z_pos;
  public final int x_dim, y_dim;
  public final Integer iris_size;
  public final Integer lamp_intensity;

  HCImageInfo(File path) {
    Matcher m = Pattern.compile(FILE_REGEX).matcher(path.toString());

    if (m.matches()) {
      image_path = path;
      file_name = m.group(1);

      experiment_name = m.group(2);
      timepoint       = Integer.parseInt(m.group(3));
      position        = m.group(4);
      well            = m.group(5);
      location        = m.group(6);
      wavelength      = Integer.parseInt(m.group(7));
    } else {
      throw new RuntimeException( "\n\tPath '"+path.toString() + 
                           "' doesn't appear to be of the correct type.\n");
    }

    // The path passed to HCImageInfo has the following structure:
    //    path_to_project/position/wavelength.
    // The picture information is located in the 'path_to_project' folder.
    String info_file_name = file_name + ".txt";
    info_path = 
      new File(path.getParentFile().getParentFile().getParentFile(),
               INFO_FOLDER + File.separator + info_file_name);

    // Open the info file whose name matches the path passed to HCImageInfo.
    // Info file is tab-delimited and as of 31 Jan, 2010 contains:
    //
    // Date           M/dd/yyyy |
    // Time           H:mm a    |  Using SimpleDateFormat
    // Exposure       \d\.\d{6}
    // Binning        \dX\d
    // Filter_Cube    \w+
    // Analog_Gain    \dX
    // X_position     -?\d+\.\d{6}
    // Y_position     -?\d+\.\d{6}
    // Z_position     -?\d+\.\d{6}
    // x_dimension    \d+
    // y_dimension    \d+
    // These next two were added recently, and are not in experiments
    // before May 2010.
    // iris_setting   \d+
    // brightness (percent)      \d+
    ArrayList<String> info = new ArrayList<String>();
    BufferedReader info_file = null;
    Date temp_acquisition_time = null;
    try {
      info_file = new BufferedReader(new FileReader(info_path));
      String line;
      while ((line = info_file.readLine()) != null) {
        info.add( (line.split("\\t"))[1] );
      }
      // If all went well, we can set the rest of the object's attributes.
      temp_acquisition_time =
        new SimpleDateFormat().parse(info.get(0) + " " + info.get(1));
    } catch (Exception e) {
      e.printStackTrace();
    }

    acquisition_time = temp_acquisition_time;
    exposure      = Double.parseDouble(info.get(2));
    binning       = Short.parseShort(info.get(3).substring(0,1));
    filter_cube   = info.get(4);
    analog_gain   = Short.parseShort(info.get(5).substring(0,1));
    x_pos         = Double.parseDouble(info.get(6));
    y_pos         = Double.parseDouble(info.get(7));
    z_pos         = Double.parseDouble(info.get(8));
    x_dim         = Integer.parseInt(info.get(9));
    y_dim         = Integer.parseInt(info.get(10));

    if (info.size() == 13) {
      iris_size = Integer.parseInt(info.get(11));
      lamp_intensity = Integer.parseInt(info.get(12));
    } else {
      iris_size = null;
      lamp_intensity = null;
    }
    try {
      info_file.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}
